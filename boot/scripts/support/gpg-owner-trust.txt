# When you generate a self-signed key, it will be untrusted. An
# untrusted key is not as useful as a trusted key so you normally want
# to give your your own self-signed keys "ultimate" trust.
#
# Suppose you have generated a self-signed key with the ID:
#
#   GPGKEYID=04B9CD3D381B574D
#
# To tell GnuPG that that key has an "ultimate" level of trust, you:
#
#   gpg --edit-key $GPGKEYID
#   trust
#   5
#   y
#   quit
#
# Now, suppose you are building a new system where you import that same
# key. It will be untrusted and you will have to go through the same
# steps as above to assign it the "ultimate" level of trust.
#
# The temptation is to try to script the "gpg --edit-key" sequence but
# that can't be done either easily or safely.
#
# The alternative is to export a statement of trust from the original
# system, and then import that statement of trust onto the new system.
#
# To export a statement of trust, you do this on the original system:
#
#   gpg --export-ownertrust >gpg-owner-trust.txt
#
# Some time later (eg when you are building a new system), you can
# import your key and then restore the statement of trust like this:
#
#   gpg --import-ownertrust <gpg-owner-trust.txt
#
# The last line of the "gpg-owner-trust.txt" file looks like this:
#
#   9ED2BB0ADA90385370FAC77E04B9CD3D381B574D:6:
#
# You can figure out which key it belongs to because the KEYID is
# embedded, as in:
#
#                           ----GPGKEYID----
#   9ED2BB0ADA90385370FAC77E04B9CD3D381B574D:6:
#
# All you need to do is run "gpg --export-ownertrust" on your own system
# and use the output to replace this file, and the PiBuilder script
# will take care of the "gpg --import-ownertrust"
#
# If you don't want to import trust, just delete this file.